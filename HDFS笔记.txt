HDFS是一个文件系统，通过目录树定位文件，是一个分布式的。适合一次读入，多次读出的场景
优点：
1、高容错性：数据自动保存多个副本，通过增加副本的形式，提高容错性。
2、适合处理大数据：能够处理GB,TBS甚至PB的数据
3、可构建在廉价的机器上，通过多副本的机制，提高可靠性

缺点：
1.不适合低延时的数据访问，比如毫秒级的存储数据。

2.无法高效的对大量小文件进行存储，它会占用namenode大量的内存来存储文件目录和块信息。因为namenode的内存是有限的。
小文件存储的寻址时间会超过读取时间，违反的HDFS的设计目标

3.不支持并发写入，文件随机修改。
不允许多个线程同时写入
仅支持数据的追加append，不允许文件的随机修改

HDFS的组成
namenode -- 管理HDFS的名称空间，配置副本策略、管理数据块的映射信息、处理客户端的读写请求

datanode--存储实际的数据块，执行数据块的读、写操作

client--文件切分、文件上传HDFS，client将文件分成一个一个的块、与namenode进行交互，获取文件位置信息、与datanode交互，读取或写入数据、client提供一些命令来管理，比如namenode的增删改查操作。

2NN-- 辅助namenode，分担其工作量、比如定期合并Fsimage和edits，在紧急情况下，可辅助恢复namenode

文件块
1.HDFS中的文件在物理上是分块存储，块的大小可以通过配置参数来规定，默认在2.0和3.0上是128M，1.0版本是64M

2.如果寻址时间约为10ms，即是找到目标block的时间是10ms.

3.寻址时间为传输时间的1%，则为最佳状态。因此传输时间=10ms/0.01 = 1000ms=1s

4。而目前磁盘的传输速率普遍为100MB/s

HDFS的文件块设置的太小，会增加寻址时间，程序一直在找块的开始位置

块设置的过大，从磁盘传输数据的时间会明显大于定位这个块开始位置所需的时间。导致程序在处理数据时，非常慢

HDFS的块大小设置，主要取决于磁盘传输速率




